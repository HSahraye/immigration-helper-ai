import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { getOpenAIClient } from '../../lib/openai';

const SYSTEM_PROMPT = `You are a knowledgeable immigration assistant specializing in student visas. Your role is to:
1. Explain student visa requirements and eligibility
2. Guide users through the application process
3. Provide information about study permits
4. Help with documentation requirements
5. Explain processing times and fees
6. Assist with post-graduation work permit queries

Always be professional, accurate, and empathetic. If you're unsure about something, say so rather than providing incorrect information.`;

export async function POST(request: Request) {
  try {
    console.log('Student visas agent: Processing request');
    
    // Validate request body
    let body;
    try {
      body = await request.json();
    } catch (error) {
      return NextResponse.json(
        { error: 'Invalid JSON in request body' },
        { status: 400 }
      );
    }

    // Validate message
    const { message } = body;
    if (!message || typeof message !== 'string') {
      console.log('Student visas agent: Invalid message format');
      return NextResponse.json(
        { error: 'Message must be a non-empty string' },
        { status: 400 }
      );
    }

    // Initialize OpenAI with error handling
    let openai;
    try {
      console.log('Student visas agent: Initializing OpenAI client');
      openai = getOpenAIClient();
      console.log('Student visas agent: OpenAI client initialized successfully');
    } catch (error) {
      console.error('Student visas agent: OpenAI initialization error:', error);
      return NextResponse.json(
        { 
          error: error instanceof Error ? error.message : 'OpenAI API key not configured',
          details: process.env.NODE_ENV === 'development' ? error : undefined
        },
        { status: 500 }
      );
    }

    try {
      console.log('Student visas agent: Sending request to OpenAI');
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 500,
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        console.error('Student visas agent: No response content from OpenAI');
        throw new Error('No response generated by OpenAI');
      }

      console.log('Student visas agent: Successfully received response from OpenAI');
      return NextResponse.json({ message: content });
    } catch (error) {
      console.error('Student visas agent: OpenAI API error:', error);
      
      if (error instanceof OpenAI.APIError) {
        const status = error.status || 500;
        return NextResponse.json(
          { 
            error: 'OpenAI API error',
            message: error.message,
            type: error.type,
            code: error.code
          },
          { status }
        );
      }

      throw error;
    }
  } catch (error) {
    console.error('Student visas agent: Unhandled error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to process request',
        message: error instanceof Error ? error.message : 'Unknown error occurred'
      },
      { status: 500 }
    );
  }
} 