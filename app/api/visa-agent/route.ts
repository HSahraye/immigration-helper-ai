import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { getOpenAIClient } from '../../lib/openai';

const SYSTEM_PROMPT = `You are an AI assistant specializing in visa applications and immigration processes. 
You provide accurate, helpful information about:
- Different types of visas and their requirements
- Application processes and timelines
- Required documentation and evidence
- Interview preparation
- Common visa issues and solutions
- Status checks and updates

Provide clear, concise answers and always maintain a professional and supportive tone.`;

export async function POST(req: Request) {
  try {
    console.log('Visa agent: Processing request');
    const { message } = await req.json();

    if (!message) {
      console.log('Visa agent: No message provided');
      return NextResponse.json(
        { error: 'No message provided' },
        { status: 400 }
      );
    }

    // Initialize OpenAI with error handling
    let openai;
    try {
      console.log('Visa agent: Initializing OpenAI client');
      openai = getOpenAIClient();
      console.log('Visa agent: OpenAI client initialized successfully');
    } catch (error) {
      console.error('Visa agent: OpenAI initialization error:', error);
      return NextResponse.json(
        { 
          error: error instanceof Error ? error.message : 'OpenAI API key not configured',
          details: process.env.NODE_ENV === 'development' ? error : undefined
        },
        { status: 500 }
      );
    }

    try {
      console.log('Visa agent: Sending request to OpenAI');
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: message }
        ],
      });

      if (!response.choices[0]?.message?.content) {
        console.error('Visa agent: No response content from OpenAI');
        throw new Error('No response generated by OpenAI');
      }

      console.log('Visa agent: Successfully received response from OpenAI');
      return NextResponse.json({
        message: response.choices[0].message.content
      });
    } catch (error) {
      console.error('Visa agent: OpenAI API error:', error);
      
      // Handle specific OpenAI API errors
      if (error instanceof OpenAI.APIError) {
        const status = error.status || 500;
        return NextResponse.json(
          { 
            error: 'OpenAI API error',
            message: error.message,
            type: error.type,
            code: error.code
          },
          { status }
        );
      }

      throw error; // Re-throw other errors to be caught by the outer catch block
    }
  } catch (error) {
    console.error('Visa agent: Unhandled error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to process request',
        message: error instanceof Error ? error.message : 'Unknown error occurred'
      },
      { status: 500 }
    );
  }
} 