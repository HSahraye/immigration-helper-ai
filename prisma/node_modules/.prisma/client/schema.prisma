// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./node_modules/.prisma/client"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (extends NextAuth)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String? // Added password field for email/password auth
  salt          String? // Added salt field for password hashing
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // Subscription and usage tracking
  subscription Subscription?
  usageRecords UsageRecord[]
  chatHistory  ChatMessage[]
  documents    Document[]

  // User preferences and settings
  settings UserSettings?
  role     UserRole      @default(USER)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Subscription Plans
model Plan {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  price         Float
  stripePriceId String?  @unique
  features      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationship to subscriptions
  subscriptions Subscription[]
}

// User Subscriptions
model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId               String // Reference to Plan
  plan                 Plan     @relation(fields: [planId], references: [id])
  status               String   @default("ACTIVE")
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  stripePriceId        String?
  currentPeriodStart   DateTime @default(now())
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// Usage Tracking
model UsageRecord {
  id       String    @id @default(cuid())
  userId   String
  type     UsageType
  count    Int       @default(1)
  date     DateTime  @default(now())
  metadata Json? // Flexible field for storing additional info

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, date])
}

// User Chat History
model ChatMessage {
  id           String   @id @default(cuid())
  userId       String
  content      String   @db.Text
  role         String // "user" or "assistant"
  resourceType String? // Which immigration resource was being used
  timestamp    DateTime @default(now())
  metadata     Json? // Additional info like tokens used

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

// Document Storage for Premium Features
model Document {
  id        String         @id @default(cuid())
  userId    String
  title     String
  content   String         @db.Text
  type      DocumentType
  status    DocumentStatus @default(DRAFT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  metadata  Json? // Additional info about the document

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
}

// User Preferences
model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  usageAlerts        Boolean  @default(true)
  darkMode           Boolean  @default(true)
  language           String   @default("en")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPPORT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

enum UsageType {
  CHAT_MESSAGE
  DOCUMENT_ANALYSIS
  DOCUMENT_GENERATION
  AI_FEATURE_ACCESS
}

enum DocumentType {
  VISA_APPLICATION
  COVER_LETTER
  SUPPORT_LETTER
  LEGAL_DOCUMENT
  OTHER
}

enum DocumentStatus {
  DRAFT
  COMPLETED
  ARCHIVED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
